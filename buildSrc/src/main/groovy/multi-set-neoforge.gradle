import java.util.stream.Stream

plugins {
    id("java-library")
    id("idea")
    id("maven-publish")
    id("net.neoforged.moddev")
}


tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

def info = file("src/main/info")
if (!info.exists()) {
    info.mkdirs()
}

def javaDir = file("src/main/java")
def pifInfo = libs.versions.package.info.get().lines()

sourceSets {
    main {
        java {
            srcDirs(info)
        }
    }
}

infoCreate(javaDir, "", info, pifInfo)


def mvns = new ArrayList<Mvn>()
checkRepositories(libs.versions.repositories.setting.get().lines(), mvns)

repositories {
    mavenLocal()
    mavenCentral()
    for (final def mvn in mvns ) {
        maven {
            name = mvn.name
            url = mvn.url
            if (!mvn.includeGroup.isEmpty()) {
                content {
                    for (final String group in mvn.includeGroup) {
                        includeGroup(group)
                    }
                }
            }
        }
    }
}

base {
    archivesName = name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.name
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.name
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.name
        }

        data {
            data()

            programArguments.addAll '--mod', project.name, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {

            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {

        "${project.name}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}
def jij = libs.bundles.jar.in.jar
def jijg=jij.get()
if (!jijg.isEmpty()) {
    jarJar.setEnabled(true)
}
dependencies {
    compileOnly(project(":annotation"))
    annotationProcessor(project(":processor"))
    compileOnly(libs.bundles.linkage)
    runtimeOnly(libs.bundles.linkage)
    implementation(jij)
    implementation(libs.bundles.implementation)
    for (final def ji in jijg) {
        jarJar(group:ji.group, name:ji.name, version:"[$ji.version,)") {transitive(false)}
    }
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : project.name,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
def at = file("src/main/resources/META-INF/accesstransformer.cfg")

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata
if (at.readBytes().length != 0) {
    neoForge.setAccessTransformers(at)
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

jar {
    exclude(".cache")
    if (at.readBytes().length == 0) {
        exclude("META-INF/accesstransformer.cfg")
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

if (!jijg.isEmpty()) {
    build {
        dependsOn 'jarJar'
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

static def infoCreate(File file, String module, File info, Stream<String> pifInfo) {
    def list = file.listFiles()
    if (list != null) {
        for (final def p in list ) {
            String name = module.isEmpty() ? p.name : module + "." + p.name
            if (p.isDirectory()) {
                infoCreate(p, name, info, pifInfo)
            } else {
                // has java file to create package-info
                def packageInfoFile = new File(info, module.replace(".", File.separator) + File.separator + "package-info.java")

                def parentFile = packageInfoFile.parentFile
                if (!parentFile.exists()) {
                    parentFile.mkdirs()
                }
                if (!packageInfoFile.exists()) {
                    def writer = packageInfoFile.newWriter()
                    for (final def line in pifInfo ) {
                        writer.writeLine(line.replace('${packageName}', module))
                    }
                    writer.close()
                }
            }
        }
    }
}


class Mvn {
    final String name
    final String url
    List<String> includeGroup = new ArrayList<>()

    Mvn(String name, String url) {
        this.name = name
        this.url = url
    }
}

static def checkRepositories(Stream<String> lines, List<Mvn> mvnList) {
    Mvn mvn = null
    lines.forEach {
        if (it.contains("->")) {
            def split = it.split("->", 2)
            mvn = new Mvn(split[0].trim(), split[1].trim())
            mvnList.add(mvn)
        } else if (it.contains("-->")) {
            def split = it.split("-->")
            mvn.includeGroup.add(split[split.length - 1].trim())
        }
    }
}